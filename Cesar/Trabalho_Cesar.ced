org h7f00
stack:
relogio:	dw	0					;ponteiro para programa do relogio
teclado:	dw	0					;ponteiro para programa do teclado
exit:		db	0					;flag de saida do programa


;Inicializacoes de alguns enderecos proprios da cpu
org	hff80
	daw	[31]
ivet:	dw	0

	dab	[23]
timdt:	db	0
ints:	db	0
inte:	db	0
tecst:	db	0
tecdt:	db	0
time:								;vetor timer e string compartilham memoria
string:
display:	dab	[36]



org 0

mov #stack, r6							;stack comeca em h7f00
mov #250, timdt							;tempo de interrupcao em 250ms
mov #ClockProgram, h7f00
mov #StringProgram, h7f02
jmp h8000							;pula para endereco onde serao chamadas as funcoes iniciais dos programas
hlt

;Registrador r3 sera usado como cursor durante todo o programa


FormatClock:							;formata o relogio para exibicao
	mov r1, -(r6)						;salva contexto de r1
	mov r2, -(r6)						;salva contexto de r2
	mov #'0', r2						;salva o char '0' em r2 para zerar o relogio com menos acessos a memoria
	mov #7, r3
	FormatClock_clock_loop:					;loop de formatacao
		tst r3
		blt FormatClock_ret
		
		mov time(r3), r1
		
		;Verifica se o caractere e dois pontos atraves da posicao do cursor
		cmp r3, #2
		beq Dec_r3
		cmp r3, #5
		beq Dec_r3

		;Verifica qual caractere esta sendo formatado (dezenas ou unidades)
		cmp r3, #7
		beq inc_decimal
		cmp r3, #4
		beq inc_decimal
		cmp r3, #1
		beq inc_decimal
		tst r3
		beq change_day

		cmp r1, #'6'
		blt Dec_r3
		mov r2, r1
		dec r3						;decrementa cursor duas vezes para pular o caractere ':'
		dec r3
		tst r3
		blt reinc_r3twice
		add #1, time(r3)
		reinc_r3twice:
			inc r3
			inc r3
		br Dec_r3
		

		inc_decimal:
			cmp r1, #'9'
			ble Dec_r3
			mov r2, r1
			dec r3
			tst r3
			blt reinc_r3
			add #1, time(r3)
			reinc_r3:
				inc r3
		Dec_r3:
			mov r1, time(r3)
			dec r3
			br FormatClock_clock_loop


		change_day:					;resolve o problema de mudanca de dia apos 23:59
			
			cmp r1, #'2'
			bne Dec_r3
			inc r3
			cmp time(r3), #'4'
			blt not_change
			mov r2, r1
			mov r1, time(r3)
			not_change:
				dec r3
				br Dec_r3
		
	FormatClock_ret:
		mov (r6)+, r2					;recupera contexto de registradores
		mov (r6)+, r1
		rts r7

ToLowerCase:							;converte o caractere recebido do teclado para minusculo
	mov r1, -(r6)
	mov tecdt, r1						;salva o caractere recebido do teclado em r1 para reduzir acessos a memoria nas comparaçoes
	
	cmp r1, #91
	bge tolower_ret
	cmp r1, #65
	blt tolower_ret
	
	add #32, tecdt

	tolower_ret:
		mov (r6)+, r1
		rts r7

ClearDisplay:							;limpa o display e mantem o cursor na mesma posicao
	mov r3, -(r6)						;salva a posicao do cursor
	mov #35, r3						;inicializa o cursor na ultima posicao do display
	cleardisplay_loop:					;loop de limpeza
		mov #' ', display(r3)
		dec r3
		bge cleardisplay_loop
	mov (r6)+, r3						;recupera a posicao do cursor anterior à limpeza
	rts r7

Print:								;imprime o caractere passado por parametro na stack
	mov r1, -(r6)						;salva contexto de r1
	mov 4(r6), r1						;salva o caractere passado por parametro em r1
	mov r1, display(r3)					;imprime o caractere no display
	inc r3							;incrementa o cursor
	mov (r6)+, r1						;recupera contexto de r1	
	rts r7


PrintClock:							;imprime o relogio no display
	clr r3
	prtclk_clock_loop:					;loop de impressao que imprime os 8 caracteres do relogio
		mov time(r3), -(r6)				;utiliza a rotina de impressao para imprimir o caractere
		jsr r7, Print
		add #2, r6					;retorna o ponteiro da stack para a posicao anterior
		cmp r3, #8
		bne prtclk_clock_loop
	rts r7

ClearClock:							;limpa o relogio mantendo a formatacao
	mov r1, -(r6)
	mov #'0', r1
	mov #7, r3
	clearclock_clock_loop:
		tst r3
		blt clearclock_ret
		cmp time(r3), #':'				;verifica se o caractere e um dos dois pontos para nao ser apagado
		beq clearclock_decr3
		mov r1, time(r3)
		clearclock_decr3:
			dec r3
		br clearclock_clock_loop

	clearclock_ret:
		mov (r6)+, r1
		rts, r7


ClockProgram:							;programa principal do relogio
	mov #ClockProgramInterruptions, ivet			;configura a rotina de interrupcao
	mov #'0', r1						;salva o caractere '0' em r1 para economizar acessos a memoria e instrucoes

	mov #7, r3

	inittime:						;inicializa o vetor do relogio com 00000000
		mov r1, time(r3)
		dec r3
		cmp r3, #-1
		bne	inittime

	mov #2, r3
	mov #':', time(r3)					;substitui as posicoes 2 e 5 do relogio por ':'
	mov #5, r3
	mov #':', time(r3)

	clr r3							;cursor
	clr r4							;contador de interrupcoes (4 interrupcoes = 1 segundo)


	
	
	clr exit
	mov	#h83, inte					;ativa interrupcao do teclado e do timer
	clock_loop:
		cmp exit, #0
		beq clock_loop

	jsr r7, ClearDisplay					;limpa o display apos a saida do programa
	mov #0, inte						;desativa interrupcoes
	rts r7

		
ClockProgramInterruptions:
	
	cmp ints, #h82						;verifica a fonte da interrupcao
	beq clkint_keyboard					;se for do teclado, chama rotina de teclado

	clkint_clock:
		inc r4
		cmp r4, #4					;verifica se passaram 4 interrupcoes (1 segundo)
		bne clkint_return
		clr r4

		mov #7, r3				
		add #1, time(r3)				;incrementa os segundos
		br clkint_return

	clkint_keyboard:
		jsr r7, ToLowerCase				;converte o caractere recebido do teclado para minusculo
		cmp tecdt, #h06					;ack (ctrl + f)
		beq finish					;se for, sai do programa
								;se nao for, verifica se e um dos caracteres especiais
		cmp tecdt,#'h'
		beq inchours
		cmp tecdt, #'m'
		beq incminutes
		cmp tecdt, #'z'
		bne clkint_return
		jsr r7, ClearClock
		br clkint_return

		inchours:					;incrementa as horas
			mov #1, r3
			add #1, time(r3)
			br clkint_return
		incminutes:					;incrementa os minutos
			mov #4, r3
			add #1, time(r3)
			br clkint_return
		finish:						;sai do programa
			mov #hff exit

	clkint_return:
	jsr r7, FormatClock					;formata o relogio para exibicao
	jsr r7, PrintClock					;imprime o relogio no display
	clr tecst						;limpa o buffer do teclado
	clr ints						;limpa a flag de interrupcao
	rti


StringProgram:
	jsr r7, ClearDisplay
	mov #StringProgramInterruptions, ivet
	mov #'_', r0
	clr r5							;temporario para a rotacao do cursor e caracter do diplay
	clr r3
	mov #h83, inte						;ativa interrupcao do teclado e do timer
	clr exit
	keyboard_loop:
		tst exit
		beq keyboard_loop
	jsr r7, ClearDisplay					;limpa o display apos a saida do programa
	rts r7

StringProgramInterruptions:
	cmp r3, #36						;Limpa o display quando o cursor chega ao final para evitar sobrescrita de memoria
	bne compare_source
	clr r3
	jsr r7, ClearDisplay
	

	compare_source:						;compara a fonte da interrupcao para decidir o que fazer
		cmp ints, #h82					;Verifica se a interrupcao foi do teclado
		beq special_characters
	
	;rotacao do cursor e caracter no display
	mov display(r3), r5					;salva o caractere do display em r5
	mov r0, display(r3)					;salva o caractere recebido do teclado no display
	mov r5, r0						;salva o caractere do display em r0
	

	br keyinterruptret

	special_characters:					;trata os caracteres especiais
		mov #'_', r0
		
		mov tecdt, r1
		cmp r1, #h0d					;cr	(enter)
		beq reset_cursor
		cmp r1, #h0a					;lf line feed (ctr + j)
		beq clr_display
		cmp r1, #h08					;bsp (backspace)
		beq backspace
		cmp r1, #h06					;ack (ctrl + f)
		beq finish_keyboard
		br print_char


;Aqui o retorno da interrupcao foi movido por extrapolar os 128 bits de desvio condicional
keyinterruptret:
		clr ints
		clr tecst
		rti
		



		reset_cursor:
			cmp display(r3), #'_' 			;se o caracter do display NAO for o cursor, apenas reseta o cursor
			bne just_reset_cursor
			clr display(r3)				;caso contrario, limpa o display
			cmp r0, #'_'				;verifica se ha um caracter em r0, proveniente da rotacao
			beq move_r5				;coloca o caracter de volta no display antes de resetar o cursor (para nao apagar o caracter que o cursor esta sobrepondo)
			mov r0, display(r3)
			move_r5:				;se houver um '_' no display e em r0, certamente em r5 havera um caracter que deve ser colocado de volta no display
				mov r5, display(r3)
			just_reset_cursor:
				clr r3
			br keyinterruptret
		clr_display:
			jsr r7, ClearDisplay
			br keyinterruptret
		backspace:

			;realiza uma serie de verificacoes preliminares para apagar apenas o caracter atras do cursor
			;e manter o caracter que o cursor esta sobrepondo (parecido com o codigo que reseta o cursor)

			cmp display(r3), #'_' 			;se o caracter do display NAO for o cursor, apenas decrementa o cursor
			bne just_dec_r3
			clr display(r3)				;caso contrario, limpa o display
			cmp r0, #'_'				;verifica se ha um caracter em r0, proveniente da rotacao
			beq mov_r5				;coloca o caracter de volta no display antes de resetar o cursor (para nao apagar o caracter que o cursor esta sobrepondo)
			mov r0, display(r3)
			mov_r5:					;se houver um '_' no display e em r0, certamente em r5 havera um caracter que deve ser colocado de volta no display
				mov r5, display(r3)


			just_dec_r3:
			cmp r3, #0
			beq keyinterruptret
			dec r3
			mov #' ', display(r3)			;move um espaço para a poicao anterior ao cursor
			br keyinterruptret

	print_char:						;imprime o caracter recebido do teclado no display
		mov tecdt, -(r6)
		jsr r7, Print
		add #2, r6
		br keyinterruptret

	finish_keyboard:
		mov #hff, exit					;finaliza o programa ao receber o caracter de finalizacao (ctrl + f)
		br keyinterruptret
		
	

org h8000

mov #0, r0
jsr r7, (h7f00(r0))
mov #2, r0
jsr r7, (h7f00(r0))
hlt