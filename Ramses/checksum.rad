	org 207
		
	ptvchar:db 0		;stores the value of vchar
	n:	db 0		;Number of operations
	xsum:	db 0		;Checksum result
	vchar:	db 0		;Address of the first byte of VCHAR
	vbits:	db 0		;Address of the first byte of VBITS
	
	org 0

Init:	
	ldr x, #0		;Initialize registers and variables
	str x, xsum
	str x, n
	ldr a, vchar
	str a, ptvchar
	ldr b, vbits, i		;loads the bit array that vbits are pointing
	ldr a, vchar, i		;loads the char that vchar are pointing
Loop:
	jz Checksum		;check if the string reached the terminator #0
	sub x, #8		;x is used for testing if vbits are over and change for the next byte
	jz ChangeByte
	add x, #9		;inc x
	shr b			;carry <- lsb(least significant bit)
	jc ToUpper		;if bit[x] == 1: touppercase; else: tolowercase
	jmp ToLower

UpdateVchar:
	ldr a, vchar		;updates the address of the first byte
	add a, #1
	str a, vchar
	ldr a, vchar, i
	jmp Loop

ChangeByte:
	ldr x, #0		;reset x to zero
	ldr a, vbits		;add 1 in vbits to point to the next byte
	add a, #1
	str a, vbits

	ldr b, vbits, i		;loads the next byte of vbits
	ldr a, vchar, i		;loads the next byte of vchar
	jmp Loop


ToUpper:
	sub a, #123
	jn Upper		;test if ascii code is < 123
	jmp UpdateVchar
Upper:
	add a, #26		;test if ascii code is < 97 (-123 + 26 = -97)
	jn UpdateVchar	

	add a, #65		;make upper case subtracting 32 (-123 + 26 + 65 = -32)	
	jmp IncN
	
ToLower:
	sub a, #91		;test if ascii code is < 91
	jn lower
	jmp UpdateVchar
lower:
	add a, #26		;test if ascii code is < 65 (-91 + 26 = -65)
	jn UpdateVchar
	
	add a, #97		;make lower case adding 32 (-91 + 26 + 97 = 32)
	
	jmp IncN
IncN:				
	str a, vchar, i		;stores the modified char in its own byte
	ldr a, n
	add a, #1		;increments the number of changes (n)
	str a, n
	jmp UpdateVchar

Checksum:

	ldr a, ptvchar		;replaces the pointer at the beginning of the string
	
Sum:
	str a, vchar		;stores the new vchar address
	ldr b, vchar, i		
	jz End			;test if reached the end of the string
	add b, xsum
	str b, xsum		;sum each ascii code 
	add a #1
	jmp Sum
End:
	hlt



	
